var fs = require('fs');
var path = require('path');

var Promise = require('bluebird');
var Ractive = require('ractive');
var EscapeDelims = require('escape-delims');

fs = Promise.promisifyAll(Object.create(fs));

var rr = require('./ractive-render');
var utils = require('./utils');
var escapeUtils = require('./escapeUtils');
module.exports = load;

/**
 * Create a component from the given file
 *
 * @param {String} file
 * @param {Object} options
 * @returns {Promise}
 * @public
 */
function load(file, options) {
	if (options.cache && rr.cache['tpl!' + file]) {
		return Promise.resolve(rr.cache['tpl!' + file]);
	}

	return fs.readFileAsync(file, 'utf8').then(function (template) {
		// ************************
        // Added escaping of template
        var escapedTemplate = escapeUtils.escapeDelims(template);
        // ************************
		return utils.wrap(Ractive.parse(escapedTemplate /*changed*/, options), options);
	}).then(function (template) {
		var basePath = path.relative(options.settings.views, path.dirname(file));
		var cOptions = utils.buildOptions(options, null, true);
		cOptions.template = template;

		return Promise.join(utils.buildComponentsRegistry(cOptions), utils.buildPartialsRegistry(basePath, cOptions), function (components, partials) {
			cOptions.components = components;
			cOptions.partials = partials;
			options.components = {};
			options.partials = {};
			
			var Component = Ractive.extend(cOptions);

			if (options.cache) {
				rr.cache['tpl!' + file] = Component;
			}

			return Component;
		});
	});
}

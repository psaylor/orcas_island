define(["jquery","sharedAudio","promise"],function(e,t,n){console.log("> Loading player.js");var r=t.audioContext,i=function(t,n){if(!(this instanceof i))return new i(t,n);console.log("Creating new Player for stream",t),n=n||{},this.settings=e.extend({},i.DEFAULTS,n),this.$this=e(this),this.audioStream=t,this.audioDataArray=[],this.audioDataBuffer=null,this._listenToAudioStream()};return i.DEFAULTS={autoPlay:!0},i.prototype._listenToAudioStream=function(){var e=this;this.audioStream.on("data",function(t){e._onAudioData(t)}),this.audioStream.on("end",function(){e._onAudioEnd()})},i.prototype._onAudioData=function(e){this.audioDataArray.push(e)},i.prototype._onAudioEnd=function(){var e=0;for(var t=0;t<this.audioDataArray.length;t++)e+=this.audioDataArray[t].byteLength;this.audioDataBuffer=new Uint8Array(e);var n=0;for(var r=0;r<this.audioDataArray.length;r++){var i=new Uint8Array(this.audioDataArray[r]);this.audioDataBuffer.set(i,n),n+=i.byteLength}this.$this.trigger("ready.spoke.player"),this.settings.autoPlay&&this.playAudio()},i.prototype.playAudio=function(){var e=this;t.promiseDecodeAudioData(this.audioDataBuffer.buffer).then(t.promisePlayAudioData).then(function(){e.$this.trigger("done.spoke.player")})},i.prototype.on=function(e,t){this.$this.on(e,t)},i});